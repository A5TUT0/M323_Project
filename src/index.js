import hh from "hyperscript-helpers";
import { h, diff, patch } from "virtual-dom";
import createElement from "virtual-dom/create-element.js";

const { div, button, p, h2, input } = hh(h);

// Definition of the different messages that can trigger actions
const MSGS = {
  ADD_CARD: "ADD_CARD", // Add new card
  DELETE_CARD: "DELETE_CARD", // Delete card
  SHOW_ANSWER: "SHOW_ANSWER", // Show the card's answer
  RATE_CARD: "RATE_CARD", // Rate the card
  UPDATE_NEW_CARD: "UPDATE_NEW_CARD", // Update form content
  CANCEL_FORM: "CANCEL_FORM", // Cancel the input form
  EDIT_CARD: "EDIT_CARD",
  SAVE_CARD: "SAVE_CARD",
};

// Calculates the total score by summing up the ratings of all cards
function calculateTotalScore(cards) {
  return cards.reduce((total, card) => total + card.rating, 0);
}

// Generates the view of an individual card, displaying the question, the option to show the answer, and the rating buttons
function viewCard(card, index, dispatch) {
  return div(
    {
      className: "p-6 bg-yellow-100 shadow-lg rounded-2xl transform hover:scale-105 transition-transform duration-300 ease-in-out",
    },
    [
      div({}, [
        h2({ className: "text-xl font-bold text-gray-800 mb-4" }, `Question: ${card.question}`),

        // If the answer is visible, it shows it, if not, it shows the button to reveal the answer
        card.showAnswer
          ? p({ className: "mt-2 text-gray-700" }, `Answer: ${card.answer}`)
          : button(
              {
                className: "mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg",
                onclick: () => dispatch({ type: MSGS.SHOW_ANSWER, index }),
              },
              "Reveal Answer"
            ),

        // If the answer is visible, it shows the buttons to rate the card
        card.showAnswer
          ? div({ className: "flex space-x-4 mt-6" }, [
              button(
                {
                  className: "bg-red-500 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-bold",
                  onclick: () => dispatch({ type: MSGS.RATE_CARD, index, rating: 0 }),
                },
                "Poor"
              ),
              button(
                {
                  className: "bg-yellow-500 hover:bg-yellow-700 text-white py-2 px-4 rounded-lg font-bold",
                  onclick: () => dispatch({ type: MSGS.RATE_CARD, index, rating: 1 }),
                },
                "Good"
              ),
              button(
                {
                  className: "bg-green-500 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-bold",
                  onclick: () => dispatch({ type: MSGS.RATE_CARD, index, rating: 2 }),
                },
                "Excellent"
              ),
            ])
          : null,

        // Button to delete the card
        button(
          {
            className: "mt-6 bg-red-500 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-bold",
            onclick: () => dispatch({ type: MSGS.DELETE_CARD, index }),
          },
          "Remove Card"
        ),
      ]),
    ]
  );
}

// Generates the main view of the application
function view(dispatch, model) {
  const totalScore = calculateTotalScore(model.cards); // Calculate total score

  // Code generated by AI
  const sortedCards = model.cards.slice().sort((a, b) => b.rating - a.rating);

  // Render the main view, including the form and the sorted cards
  return div({ className: "space-y-6" }, [
    div({ className: "absolute top-4 right-4 bg-blue-100 text-blue-700 py-2 px-4 rounded-lg shadow" }, [
      p({ className: "font-bold" }, `Total Score: ${totalScore}`), // Display total score
    ]),
    // Code generated by AI
    renderForm(dispatch, model), // Render the form to add new cards
    ...sortedCards.map((card, index) => viewCard(card, index, dispatch)), // Render the sorted cards
  ]);
}

// Generates the form to add new cards with fields for the question and the answer
function renderForm(dispatch, model) {
  return div({ className: "mb-4" }, [
    // Input for the question
    input({
      type: "text",
      placeholder: "Enter the question",
      className: "border p-2 rounded w-full mb-2",
      oninput: (e) => dispatch({ type: MSGS.UPDATE_NEW_CARD, field: "question", value: e.target.value }),
      value: model.newCard.question || "", // Keep the field value synchronized with the model
    }),
    // Input for the answer
    input({
      type: "text",
      placeholder: "Enter the answer",
      className: "border p-2 rounded w-full mb-2",
      oninput: (e) => dispatch({ type: MSGS.UPDATE_NEW_CARD, field: "answer", value: e.target.value }),
      value: model.newCard.answer || "",
    }),
    // Buttons to add the card or cancel the form
    div({ className: "flex space-x-4" }, [
      button(
        {
          className: "bg-green-500 hover:bg-green-700 text-white py-2 px-4 rounded",
          onclick: () => dispatch({ type: MSGS.ADD_CARD }), // Add the new card
        },
        "Done"
      ),
      button(
        {
          className: "bg-red-500 hover:bg-red-700 text-white py-2 px-4 rounded",
          onclick: () => dispatch({ type: MSGS.CANCEL_FORM }), // Cancel the form
        },
        "Cancel"
      ),
    ]),
  ]);
}

// Function that updates the model state based on the received message
function update(msg, model) {
  switch (msg.type) {
    case MSGS.UPDATE_NEW_CARD:
      // Update the content of the new card
      return {
        ...model,
        newCard: {
          ...model.newCard,
          [msg.field]: msg.value,
        },
      };

    case MSGS.ADD_CARD:
      // Add the new card to the model if it has a question and an answer
      if (model.newCard.question && model.newCard.answer) {
        const newCard = { ...model.newCard, showAnswer: false, rating: 0 }; // Add with an initial rating of 0
        return { ...model, cards: [...model.cards, newCard], newCard: { question: "", answer: "" } }; // Clear the form after adding
      }
      return model;

    case MSGS.CANCEL_FORM:
      // Clear the form fields
      return {
        ...model,
        newCard: { question: "", answer: "" },
      };

    case MSGS.DELETE_CARD:
      // Delete the selected card
      const updatedCards = model.cards.filter((_, i) => i !== msg.index);
      return { ...model, cards: updatedCards };

    case MSGS.SHOW_ANSWER:
      // Show the answer of the selected card
      const cardsWithAnswer = model.cards.map((card, i) => (i === msg.index ? { ...card, showAnswer: true } : card));
      return { ...model, cards: cardsWithAnswer };

    case MSGS.RATE_CARD:
      // Update the rating of the selected card
      const ratedCards = model.cards.map((card, i) => (i === msg.index ? { ...card, rating: msg.rating } : card));
      return { ...model, cards: ratedCards };

    default:
      return model;
  }
}

// Source: Mr. Michel
function app(initModel, update, view, node) {
  let model = initModel;
  let currentView = view(dispatch, model);
  let rootNode = createElement(currentView);
  node.appendChild(rootNode);
  function dispatch(msg) {
    model = update(msg, model);
    const updatedView = view(dispatch, model);
    const patches = diff(currentView, updatedView);
    rootNode = patch(rootNode, patches);
    currentView = updatedView;
  }
}

// Initial model with an example card and an empty form
const initModel = {
  cards: [{ question: "What is JavaScript?", answer: "A programming language", showAnswer: false, rating: 0 }],
  newCard: { question: "", answer: "" },
};

const rootNode = document.getElementById("app");
app(initModel, update, view, rootNode);
